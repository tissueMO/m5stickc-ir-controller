name: Build and Push for Frontend

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

env:
  TARGET_DIR: frontend
  IMAGE_NAME: frontend
  DOCKER_FILE: Dockerfile-frontend
  DOCKER_REGISTRY: docker.pkg.github.com

jobs:
  build:
    # Webブラウザー向けに静的コンテンツのビルドを行う
    name: Build static contents
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-${{ github.repository }}-${{ hashFiles(format('{0}{1}', github.workspace, '${{ env.TARGET_DIR }}/yarn.lock')) }}
          restore-keys:
            ${{ runner.os }}-${{ github.repository }}-

      - name: Install dependencies
        run: yarn
        working-directory: ${{ env.TARGET_DIR }}
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Build for production
        run: yarn run build
        working-directory: ${{ env.TARGET_DIR }}

      - name: Upload result for next job
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: ${{ env.TARGET_DIR }}/dist

  push:
    # ビルドした静的コンテンツを Docker コンテナーに封入して GitHub Packages にプッシュする
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Download result from previous job
        uses: actions/download-artifact@v1
        with:
          name: dist

      - name: Build image
        run: docker build --file $DOCKER_FILE --tag $IMAGE_NAME .

      - name: Login registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login $DOCKER_REGISTRY -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          IMAGE_VERSION=latest

          echo "IMAGE_ID:" $IMAGE_ID
          echo "IMAGE_VERSION:" =$IMAGE_VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$IMAGE_VERSION
          docker push $IMAGE_ID:$IMAGE_VERSION
